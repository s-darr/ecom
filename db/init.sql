CREATE TABLE Users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(255) UNIQUE,
  role VARCHAR(50) NOT NULL,
  password VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Sellers (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES Users(id),
  store_name VARCHAR(255) NOT NULL,
  store_description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Products (
  id SERIAL PRIMARY KEY,
  seller_id INTEGER REFERENCES Sellers(id),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  quantity INTEGER NOT NULL,
  price DECIMAL(10, 2) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Cart (
  id SERIAL PRIMARY KEY,
  buyer_id INTEGER REFERENCES Users(id),
  product_id INTEGER REFERENCES Products(id),
  quantity INTEGER NOT NULL
);

CREATE TABLE Orders (
  id SERIAL PRIMARY KEY,
  buyer_id INTEGER REFERENCES Users(id),
  order_status VARCHAR(50) NOT NULL DEFAULT 'Pending',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE OrderDetails (
  id SERIAL PRIMARY KEY,
  order_id INTEGER REFERENCES Orders(id),
  product_id INTEGER REFERENCES Products(id),
  quantity INTEGER NOT NULL,
  price DECIMAL(10, 2) NOT NULL
);

CREATE TABLE Reviews (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES Products(id),
    user_id INTEGER REFERENCES Users(id),
    rating INTEGER CHECK (rating >= 1 AND rating <= 5), 
    review_text TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE Cart
ADD CONSTRAINT unique_buyer_product
UNIQUE (buyer_id, product_id);